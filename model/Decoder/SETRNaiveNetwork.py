import math
from typing import List, Union
import warnings
import torch
import torch.nn as nn
import torch.nn.functional as F
from einops import rearrange
import pytorch_lightning as pl
from functools import partial


class Decoder(pl.LightningModule):
    '''
    upsampling decoder
    '''
    def __init__(self, ppm_scales=[64, 32, 16, 8]):
        super(Decoder, self).__init__()

        reduce_dim = 256
        embed_dim = 512
        

        self.cls = nn.Sequential(
            nn.Conv2d(reduce_dim, reduce_dim, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(reduce_dim),
            nn.ReLU(inplace=True),
            nn.Conv2d(reduce_dim, 2, kernel_size=1)
        )  

        self.pyramid_bins = ppm_scales
        
        self.vit = nn.ModuleList()
        self.vit_head = nn.ModuleList()

        for idx, bin in enumerate(self.pyramid_bins):
            self.vit.append(ViT(
                img_size=bin,
                patch_size=4,
                in_chans=reduce_dim*2 if idx>0 else reduce_dim,
                embed_dim=embed_dim,
                depth=8,
                num_heads=8,
            ))
            self.vit_head.append(ViTUpHead(
                img_size=bin,
                embed_dim=embed_dim,
                out_channel=reduce_dim
            ))

        self.res1 = nn.Sequential(
            nn.Conv2d(reduce_dim*len(self.pyramid_bins), reduce_dim, kernel_size=1, padding=0, bias=False),
            nn.ReLU(inplace=True),                          
        )
        self.res2 = nn.Sequential(
            nn.Conv2d(reduce_dim, reduce_dim, kernel_size=3, padding=1, bias=False),
            nn.ReLU(inplace=True),   
            nn.Conv2d(reduce_dim, reduce_dim, kernel_size=3, padding=1, bias=False),
            nn.ReLU(inplace=True),                             
        )

    def forward(self, feats: List[torch.Tensor], sz: int):
        '''
        feats in part of shape List ([b, 256, 100, 100] [b, 256, 50, 50] [b, 256, 25, 25] [b, 256, 13, 13])
        '''

        h, w = sz

        pyramid_feat_list = []  # 25*25
        out_list = []   # [64, 32, 16, 8]
        feat = feats[0] # [b, 256, 25, 25]
        
        for idx, bin in enumerate(self.pyramid_bins):  # [64, 32, 16, 8]

            merge_feat_bin = F.interpolate(feat, size=(bin, bin), mode='bilinear', align_corners=True)      # [b,256,bin,bin]

            if idx > 0:
                pre_feat_bin = pyramid_feat_list[idx-1].clone()     # 梯度会叠加
                pre_feat_bin = F.interpolate(pre_feat_bin, size=(bin, bin), mode='bilinear', align_corners=True)
                merge_feat_bin = torch.cat([merge_feat_bin, pre_feat_bin], 1)

            merge_feat_bin = self.vit[idx](merge_feat_bin)      # list of [B, bin/4*W/4, 256, ], len=depth
            merge_feat_bin = self.vit_head[idx](merge_feat_bin)      # [B, 256, bin, bin]
            merge_feat_bin = F.interpolate(merge_feat_bin, size=(feat.size(2), feat.size(3)), mode='bilinear', align_corners=True)  # using last output
            pyramid_feat_list.append(merge_feat_bin)
            out_list.append(merge_feat_bin)

        # original size 
        query_feat = torch.cat(pyramid_feat_list, dim=1)    # 256*4=1024 channels
        query_feat = self.res1(query_feat)
        query_feat = self.res2(query_feat) + query_feat           
        out = self.cls(query_feat)
        out = F.interpolate(out, size=(h, w), mode='bilinear', align_corners=True)

        pyramid_feat_list.clear()
        return out, out_list




class DropPath(pl.LightningModule):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        if self.drop_prob == 0. or not self.training:
            return x
        keep_prob = 1 - self.drop_prob
        # work with diff dim tensors, not just 2D ConvNets
        shape = (x.shape[0],) + (1,) * (x.ndim - 1)
        random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
        random_tensor.floor_()  # binarize
        output = x.div(keep_prob) * random_tensor
        return output


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (torch.Tensor, float, float, float, float) -> torch.Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class MLP(pl.LightningModule):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class SelfAttention(pl.LightningModule):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads

        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x: torch.Tensor):
        B, N, C = x.shape           # [B, H/patch_size*W/patch_size+1, embed_dim, ]
        q, k, v = self.qkv(x).reshape(B, N, 3, self.num_heads,
                                      C // self.num_heads).permute(2, 0, 3, 1, 4)

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class AttnBlock(pl.LightningModule):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = SelfAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = MLP(in_features=dim, hidden_features=mlp_hidden_dim,
                       act_layer=act_layer, drop=drop)

    def forward(self, x):
        x = x + self.drop_path(self.attn(self.norm1(x)))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class PatchEmbed(pl.LightningModule):
    """ Image to Patch Embedding
    """

    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        img_size = (img_size, img_size) if isinstance(img_size, (int, float)) else img_size
        patch_size = (patch_size, patch_size) if isinstance(patch_size, (int, float)) else patch_size
        num_patches = (img_size[1] // patch_size[1]) * (img_size[0] // patch_size[0])
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches

        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        B, C, H, W = x.shape

        assert H == self.img_size[0] and W == self.img_size[1], \
            f"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]})."

        x = self.proj(x)
        return x

class ViT(pl.LightningModule):
    """ Vision Transformer with support for patch or hybrid CNN input stage
    """

    def __init__(self, 
                 img_size=384, 
                 patch_size=16, 
                 in_chans=3, 
                 embed_dim=1024, 
                 depth=24,
                 num_heads=16, 
                 mlp_ratio=4., 
                 qkv_bias=True, 
                 qk_scale=None, 
                 drop_rate=0.1, 
                 attn_drop_rate=0.,
                 drop_path_rate=0.,
                 norm_layer=partial(nn.LayerNorm, eps=1e-6), 
                **kwargs):
        super(ViT, self).__init__(**kwargs)
        self.img_size = img_size
        self.patch_size = patch_size
        self.in_chans = in_chans
        self.embed_dim = embed_dim
        self.depth = depth
        self.num_heads = num_heads
        self.mlp_ratio = mlp_ratio
        self.qkv_bias = qkv_bias
        self.qk_scale = qk_scale
        self.drop_rate = drop_rate
        self.attn_drop_rate = attn_drop_rate
        self.drop_path_rate = drop_path_rate
        self.norm_layer = norm_layer

        self.num_stages = self.depth
        self.out_indices = tuple(range(self.num_stages))

        self.patch_embed = PatchEmbed(
            img_size=self.img_size, 
            patch_size=self.patch_size, 
            in_chans=self.in_chans, 
            embed_dim=self.embed_dim)
        self.num_patches = self.patch_embed.num_patches

        self.pos_embed = nn.Parameter(torch.zeros(1, self.num_patches, self.embed_dim))
        self.pos_drop = nn.Dropout(p=self.drop_rate)

        dpr = [x.item() for x in torch.linspace(0, self.drop_path_rate, self.depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            AttnBlock(
                dim=self.embed_dim, 
                num_heads=self.num_heads, 
                mlp_ratio=self.mlp_ratio, 
                qkv_bias=self.qkv_bias, 
                qk_scale=self.qk_scale,
                drop=self.drop_rate, 
                attn_drop=self.attn_drop_rate, 
                drop_path=dpr[i], 
                norm_layer=self.norm_layer)
            for i in range(self.depth)])

        trunc_normal_(self.pos_embed, std=.02)

    def init_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Linear):
                trunc_normal_(m.weight, std=.02)
                if isinstance(m, nn.Linear) and m.bias is not None:
                    nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.LayerNorm):
                nn.init.constant_(m.bias, 0)
                nn.init.constant_(m.weight, 1.0)

    @property
    def no_weight_decay(self):
        return {'pos_embed', 'cls_token'}

    def _conv_filter(self, state_dict, patch_size=16):
        """ convert patch embedding weight from manual patchify + linear proj to conv"""
        out_dict = {}
        for k, v in state_dict.items():
            if 'patch_embed.proj.weight' in k:
                v = v.reshape((v.shape[0], 3, patch_size, patch_size))
            out_dict[k] = v
        return out_dict

    def to_2D(self, x):
        n, hw, c = x.shape
        h = w = int(math.sqrt(hw))
        x = x.transpose(1, 2).reshape(n, c, h, w)
        return x

    def to_1D(self, x):
        n, c, h, w = x.shape
        x = x.reshape(n, c, -1).transpose(1, 2)
        return x

    def forward(self, x:torch.Tensor):
        B, C, H, W = x.shape        # # [b,256,bin,bin]
        x = self.patch_embed(x)     # [B, embed_dim, bin/patch_size, bin/patch_size]

        x = x.flatten(2).transpose(1, 2)    # [B, H/patch_size*W/patch_size, embed_dim, ]

        x = x + self.pos_embed
        x = self.pos_drop(x)                # [B, H/patch_size*W/patch_size, embed_dim, ]

        outs = []
        for i, block in enumerate(self.blocks):
            x = block(x)                    
            if i in self.out_indices:
                outs.append(x)
        return tuple(outs)      # tuple of [B, H/patch_size*W/patch_size, embed_dim, ]

class ViTUpHead(pl.LightningModule):

    def __init__(self, 
                 img_size=768, 
                 embed_dim=1024,
                 norm_layer=partial(nn.LayerNorm, eps=1e-6,),
                 out_channel=2,
                 **kwargs):
        super(ViTUpHead, self).__init__(**kwargs)
        self.img_size = img_size
        self.norm = norm_layer(embed_dim)

        self.conv = nn.Sequential(
            nn.Conv2d(embed_dim, 256, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True), 
            nn.Conv2d(256, out_channel, 1, 1)
        )

    def init_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Linear):
                trunc_normal_(m.weight, std=.02)
                if isinstance(m, nn.Linear) and m.bias is not None:
                    nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.LayerNorm):
                nn.init.constant_(m.bias, 0)
                nn.init.constant_(m.weight, 1.0)

    def forward(self, x):
        
        x = x[-1]   # ViT returns results in each block in a list, x in shape of [B, H/patch_size*W/patch_size, embed_dim, ]
        if x.dim() == 3:
            n, hw, c = x.shape
            h = w = int(math.sqrt(hw))
            x = x.transpose(1, 2).reshape(n, c, h, w)

        x = self.conv(x)
        x = F.interpolate(x, size=self.img_size, mode='bilinear', align_corners=True)

        return x        # [B, 256, bin, bin]